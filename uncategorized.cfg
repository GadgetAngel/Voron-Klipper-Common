[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if not printer.configfile.warnings %}
      {action_respond_info("No warnings found")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dump all Klipper parameters to terminal
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}   
    {% endif %} 

    {% if search in ns.path|lower %}
        { action_respond_info(ns.path|join) }
    {% endif %} 

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}
        {% if ' ' in childkey %}
          {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}
          {% set null = ns.path.append(".%s" % (childkey)) %}
        {% endif %} 
        {% if child is mapping  %}
          { loop(child.items()) }
        {% else %}
          {% if search in ns.path|lower %}
            { action_respond_info("%s : %s" % (ns.path|join, child)) }   
          {% endif %} 
        {% endif %} 
      {% endfor %}
    {% endif %} 
  {% endfor %}

[delayed_gcode _CHECK_CONFIG]
initial_duration: 0.1
gcode:
  ## exexcute _USER_VARIABLE once at startup to do the needed calcs
  {% if printer['gcode_macro _USER_VARIABLE'] is not defined %}
    { action_respond_info(
        "CONFIG: ERROR\n"
        "_USER_VARIABLE macro missing\n"
        "This holds common variables for your printer and must be defined") }
  {% else %}
    _USER_VARIABLE
    ##### consistent check #####
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'z_calib' and 
      printer['gcode_macro _USER_VARIABLE'].probe_type|lower == 'unknown' %}
      {action_respond_info(
      "CONFIG: ERROR\n"
      "[z_calibration] defined but no probe found\n")}
    {% endif %}    
  {% endif %}
  ## check if save_variables are defined
  {% if 'save_variables' not in printer %}
    {action_respond_info(
      "CONFIG: ERROR\n"
      "[save_variables] missing\n"
      "This is needed to store variables to a file")}
  {% endif %}
  DUMP_WARNINGS
