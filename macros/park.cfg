#######################################
#       Toolhead Parking Macros       #
#######################################
[gcode_macro PARK_FRONT]
description: Park head front high
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set z_max_delta = printer["gcode_macro _PRINTER_VARIABLE"].z_max_delta|default(40)|int %}
    {% set boarder_delta = printer["gcode_macro _PRINTER_VARIABLE"].boarder_delta|default(20)|int %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = min_y + boarder_delta %}
    {% set park_z = max_z - z_max_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_FRONT ====")}
        {action_respond_info("delta [z_max: '%s', boarder: '%s']" % (z_max_delta,boarder_delta))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s', z: '%s']" % (max_x,max_z))}
        {action_respond_info("min: [y: '%s']" % (min_y))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

[gcode_macro PARK_FRONT_MID]
description: Park head front middle
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set boarder_delta = printer["gcode_macro _PRINTER_VARIABLE"].boarder_delta|default(20)|int %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = min_y + boarder_delta %}
    {% set park_z = max_z / 2 %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_FRONT_MID ====")}
        {action_respond_info("delta [boarder: '%s']" % (boarder_delta))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s', z: '%s']" % (max_x,max_z))}
        {action_respond_info("min: [y: '%s']" % (min_y))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

[gcode_macro PARK_FRONT_LOW]
description: Park head front low
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set z_max_delta = printer["gcode_macro _PRINTER_VARIABLE"].z_max_delta|default(40)|int %}
    {% set boarder_delta = printer["gcode_macro _PRINTER_VARIABLE"].boarder_delta|default(20)|int %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = min_y + boarder_delta %}
    {% set park_z = z_max_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_FRONT_LOW ====")}
        {action_respond_info("delta [z_max: '%s', boarder: '%s']" % (z_max_delta,boarder_delta))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s']" % (max_x))}
        {action_respond_info("min: [y: '%s']" % (min_y))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

[gcode_macro PARK_CENTER]
description: Park head middle of printer
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = max_y / 2 %}
    {% set park_z = max_z / 2 %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_CENTER ====")}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s',y: '%s',z: '%s']" % (max_x,max_y,max_z))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

[gcode_macro PARK_BED]
description: Park head middle of bed low
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set z_min_delta = printer["gcode_macro _PRINTER_VARIABLE"].z_min_delta|default(30)|int %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = max_y / 2 %}
    {% set park_z = z_min_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_BED ====")}
        {action_respond_info("delta [z_min: '%s']" % (z_min_delta))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s', y: '%s']" % (max_x,max_y))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

[gcode_macro PARK_REAR]
description: Park head rear high
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set boarder_delta = printer["gcode_macro _PRINTER_VARIABLE"].boarder_delta|default(20)|int %}
    {% set z_max_delta = printer["gcode_macro _PRINTER_VARIABLE"].z_max_delta|default(40)|int %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set park_x = max_x / 2 %}
    {% set park_y = max_y - boarder_delta %}
    {% set park_z = max_z - z_max_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_REAR ====")}
        {action_respond_info("delta [z_max: '%s', boarder: '%s']" % (z_max_delta,boarder_delta))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("max: [x: '%s', y: '%s',, z: '%s']" % (max_x,max_y,max_z))}
        {action_respond_info("park: [z: '%s', y: '%s', z: '%s']" % (park_x,park_y,park_z))}
        {action_respond_info("===============")}
    {% endif %}

    PARK X={park_x} Y={park_y} Z={park_z} PARK_SPEED={park_speed} DEBUG={debug}

# TODO: make this care about borders
[gcode_macro _PARK_SAFE_PAUSE]
description: Park head in a safe position up front (used for parking during PAUSE)
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set printer_state = printer.print_stats.state|lower %}
    {% set wipe_out = printer['gcode_macro _PRINTER_VARIABLE'].pause_wipe_out|default(3)|float %}
    {% set border_delta = printer['gcode_macro _PRINTER_VARIABLE'].border_delta|default(5)|float %}
    {% set park_speed = printer.configfile.config.pause_resume.recover_velocity|default(300)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_x = printer.toolhead.position.x|float %}
    {% set act_y = printer.toolhead.position.y|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set park_x = printer.toolhead.axis_minimum.x|float + border_delta %}
    {% set park_y = printer.toolhead.axis_minimum.y|float + border_delta %}
    {% if act_x < (max_x-wipe_out) %}
    {% set safe_x = wipe_out %}
    {% else %}
    {% set safe_x = max_x-act_x %}
    {% endif %}
    {% if act_y < (max_y-wipe_out) %}
    {% set safe_y = wipe_out %}
    {% else %}
    {% set safe_y = max_y - act_y %}
    {% endif %}
    {% if (max_z-act_z) > 0.3 %}
    {% set safe_z_wipe_height = 0.3 %}
    {% set safe_z = (((max_z-act_z)/3)-0.3) %}
    {% else %}
    {% set safe_z = ((max_z-act_z)/3) %}
    {% endif %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_SAFE_PAUSE ====")}
        {action_respond_info("printer_state: '%s'" % (printer_state))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("safe_z_wipe: '%s'" % (safe_z_wipe))}
        {action_respond_info("delta: [border: '%s']" % (border_delta))}
        {action_respond_info("park: [x: '%s', y: '%s']" % (park_x,park_y))}
        {action_respond_info("max: [x: '%s', y: '%s',, z: '%s']" % (max_x,max_y,max_z))}
        {action_respond_info("act: [z: '%s', y: '%s', z: '%s']" % (act_x,act_y,act_z))}
        {action_respond_info("safe: [z: '%s', y: '%s', z: '%s']" % (safe_x,safe_y,safe_z))}
        {action_respond_info("===============")}
    {% endif %}

    {% if printer_state == "paused" %}
    {% if safe_z_wipe_height > 0 %}
        G0 Z{safe_z_wipe_height} F{park_speed*60}
        G0 X{safe_x} Y{safe_y} F{park_speed*60}
        G0 Z{safe_z-safe_z_wipe_height} F{park_speed*3}
    {% else %}
        G0 X{safe_x} Y{safe_y} F{park_speed*60}
        G0 Z{safe_z} F{park_speed*3}
    {% endif %}
    G90
    SAVE_GCODE_STATE NAME=PAUSE_RAISED_Z
    G1 X{park_x} Y{park_y} F{park_speed*60}
    SAVE_GCODE_STATE NAME=PAUSE_PARK_POSITION
    {% else %}
        {action_respond_info("ERROR: Printer is not paused. Not able to park in unknown state.")}
    {% endif %}

[gcode_macro _PARK_SAFE_END]
description: Park head in a safe position right above the print. (used for parking during PRINT_END along with G28 XY)
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set printer_state = printer.print_stats.state|lower %}
    {% set wipe_out = printer['gcode_macro _PRINTER_VARIABLE'].wipe_out|default(3)|int %}
    {% set park_speed = printer.configfile.config.pause_resume.recover_velocity|default(300)|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_x = printer.toolhead.position.x|float %}
    {% set act_y = printer.toolhead.position.y|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% if act_x < (max_x-wipe_out) %}
        {% set safe_x = wipe_out %}
    {% else %}
        {% set safe_x = max_x-act_x %}
    {% endif %}
    {% if act_y < (max_y-wipe_out) %}
        {% set safe_y = wipe_out %}
    {% else %}
        {% set safe_y = max_y - act_y %}
    {% endif %}
    {% if (max_z-act_z) > 0.3 %}
        {% set safe_z_wipe = 0.3 %}
        {% set safe_z = (((max_z-act_z)/3)-0.3) %}
    {% else %}
        {% set safe_z_wipe = 0 %}
        {% set safe_z = ((max_z-act_z)/3) %}
    {% endif %}
     {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK_SAFE_END ====")}
        {action_respond_info("printer_state: '%s'" % (printer_state))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("safe_z_wipe: '%s'" % (safe_z_wipe))}
        {action_respond_info("max: [x: '%s', y: '%s',, z: '%s']" % (max_x,max_y,max_z))}
        {action_respond_info("act: [z: '%s', y: '%s', z: '%s']" % (act_x,act_y,act_z))}
        {action_respond_info("safe: [z: '%s', y: '%s', z: '%s']" % (safe_x,safe_y,safe_z))}
        {action_respond_info("===============")}
    {% endif %}

    {% if printer_state == "printing" %}
        {% if safe_z_wipe > 0 %}
            G0 Z{safe_z_wipe} F{park_speed*3}
            G0 X{safe_x} Y{safe_y} F{park_speed*60}
            G0 Z{safe_z-safe_z_wipe} F{park_speed*3}
        {% else %}
            G0 X{safe_x} Y{safe_y} F{park_speed*60}
            G0 Z{safe_z} F{park_speed*3}
        {% endif %}
    {% else %}
        {action_respond_info("ERROR: Printer is not printing. Not able to park.")}
    {% endif %}

# TODO: Allow for PARK X Y, PARK Z, PARK X Y Z
[gcode_macro PARK]
description: Park Head
gcode:
    # command params
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set z = params.Z|default(0)|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set printer_state = printer.print_stats.state|lower %}
    {% set park_speed = printer["gcode_macro _PRINTER_VARIABLE"].park_speed|default(18000)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PARK ====")}
        {action_respond_info("[z: '%s', y: '%s', z: '%s']" % (x,y,z))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("printer_state: '%s'" % (printer_state))}
        {action_respond_info("===============")}
    {% endif %}
#    {% if printer_state != "printing" %}
#        {action_respond_info("ERROR: You cannot park while printing.")}
#    {% else %}
        SAVE_GCODE_STATE NAME=STATE_PARK
        _CG28 # Home if not already homed
        G90 # absolute positioning
        G0 X{x} Y{y} Z{z} F{park_speed}
        RESTORE_GCODE_STATE NAME=STATE_PARK
#    {% endif %}
