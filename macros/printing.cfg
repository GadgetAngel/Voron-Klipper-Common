###########################
#     Printing Macros     #
###########################
[gcode_macro TOGGLE_BACK_TO_BACK]
description: Toggle back to back printing.
gcode:
    # features
    {% set b2b_state = printer.save_variables.variables.b2b_state|default('false')|lower %}

    {% if b2b_state == "false" %}
        {action_respond_info('back to back printing is off, turning it on')}
        SAVE_VARIABLE VARIABLE=b2b_state VALUE='"true"'
    {% else %}
        {action_respond_info('back to back printing is on, turning it off')}
        SAVE_VARIABLE VARIABLE=b2b_state VALUE='"false"'
    {% endif %}

[gcode_macro SET_MIN_SOAK_TIME]
description: Set the min heat soak time.
gcode:
    # command params
    {% set minutes = params.MINUTES|default(0)|int %}

    {action_respond_info("setting min_soak_time to '%s' minutes" % (min_soak_time))}
    SAVE_VARIABLE VARIABLE=min_soak_time VALUE={min_soak_time|int}

[gcode_macro PRINT_START]
description: Common print start macro
gcode:
    # command params
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_extruder = params.EXTRUDER|default(150)|int %}
    {% set target_chamber = params.CHAMBER|default(0)|int %}
    {% set filament_type = params.FILAMENT|default("ABS")|upper %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
    {% set unretract_start = params.UNRETRACT_START|default(9)|int %}
    {% set unretract_speed = params.UNRETRACT_SPEED|default(1500)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default('false')|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info('==== PRINT_START ====')}
        {action_respond_info("targets [bed: '%s', extruder: '%s', chamber: '%s']" % (target_bed,target_extruder,target_chamber))}
        {action_respond_info("filament_type: '%s'" % (filament_type))}
        {action_respond_info("fl_size: '%s'" % (fl_size))}
        {action_respond_info("unretract: [start: '%s', speed: '%s']" % (unretract_start,unretract_speed))}
        {action_respond_info('===============')}
    {% endif %}

    RESPOND MSG='Print Start'
    M117 Homing
    G28

    PREHEAT BED={target_bed} CHAMBER={target_chamber} FILAMENT={filament_type} DEBUG={debug}
    CALIBRATE SIZE={fl_size} DEBUG={debug}

    M117 Heating ~bed~{target_bed}~degrees~
    M190 S{target_bed} # Set bed to final temp and wait

    M117 Heating ~extruder~: {target_extruder}~degrees~
    M109 S{target_extruder} # Set extruder to final temp and wait

    G1 Z5 F5000 # Move head 5mm from bed surface
    G90 # Absolute Positioning
    M83 # Make the E relative independant of other axis
    G1 E{unretract_start} F{unretract_speed} # Unretract filament
    G92 E0 # reset extruder

    RESPOND MSG='Printing'
    M117 Printing

[gcode_macro PREHEAT]
description: Preheat the printer bed/extruder and wait for chamber temps if requested.
gcode:
    # command params
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_extruder_hold = params.EXTRUDER_HOLD|default(150)|int %}
    {% set target_chamber = params.CHAMBER|default(0)|int %}
    {% set filament_type = params.FILAMENT|default("ABS")|upper %}
    {% set park_speed = params.PARK_SPEED|default(18000)|int %}
    {% set min_soak_time = params.MIN_SOAK_TIME|default(0)|int %}
    {% set string_filament_types = params.FILAMENT_TYPES|default('ABS,ASA')|upper|replace(" ", "") %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set filament_types = string_filament_types.split(',') %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default('false')|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info('==== PREHEAT ====')}
        {action_respond_info("targets [bed: '%s', extruder_hold: '%s', chamber: '%s']" % (target_bed,target_extruder_hold,target_chamber))}
        {action_respond_info("filament_type: '%s'" % (filament_type))}
        {action_respond_info("park_speed: '%s'" % (park_speed))}
        {action_respond_info("min_soak_time: '%s'" % (min_soak_time))}
        {action_respond_info("filament_types: '%s'" % (filament_types))}
        {action_respond_info('===============')}
    {% endif %}

    RESPOND MSG="Preheat Start"
    M117 Preheat Start

    G90 # absolute positioning
    PARK_BED DEBUG={debug}

    M104 S{target_extruder_hold} # Set extruder to hold temp
    M117 Heating ~bed~{target_bed}~degrees~
    M190 S{target_bed} # Set bed to final temp and wait

    # Chamber/time soak for some filament types
    {% if filament_type in filament_types %}
        M106 S255 # Turn on Part Cooling Fan to 100%
        _CIRCULATION_START FILAMENT={filament_type} DEBUG={debug}

        # Timed bed soak
        {% if min_soak_time > 0 %}
            {% for timer in range(min_soak_time|int,0,-1) %}
                M117 Soaking ~bed~ {timer|int}m
                M105
                G4 P60000
            {% endfor %}
        {% endif %}

        _RUN_BA EVENT=soak_timer TYPE="before" DEBUG={debug}
        # Chamber soak
        {% if printer['temperature_sensor chamber'] and target_chamber > 0 and
            printer['temperature_sensor chamber'].temperature < target_chamber %}
            M117 Soaking ~chamber~ {target_chamber}~degrees~
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
        {% endif %}

        _RUN_BA EVENT=soak_timer TYPE="after" DEBUG={debug}
        _RUN_BA EVENT=timed_soak TYPE="after" DEBUG={debug}

        M107 # Stop part cooling fan
    {% endif %}

    RESPOND MSG='Preheat Complete'
    M117 Preheat Complete

[gcode_macro PRINT_END]
description: Common print end macro.
gcode:
    # command params
    {% set filament_type = params.FILAMENT|default("ABS")|upper %}
    {% set wipe_out = params.WIPE_OUT|default(3)|int %}
    {% set retract_speed = params.RETRACT_SPEED|default(800)|int %}
    {% set retract_end = params.RETRACT_END|default(10)|int %}
    {% set retract_pause = params.RETRACT_PAUSE|default(1)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set velocity = printer.configfile.config.pause_resume.recover_velocity|int %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_x = printer.toolhead.position.x|float %}
    {% set act_y = printer.toolhead.position.y|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_x < (max_x-wipe_out) %}
        {% set safe_x = wipe_out %}
    {% else %}
        {% set safe_x = max_x-act_x %}
    {% endif %}
    {% if act_y < (max_y-wipe_out) %}
        {% set safe_y = wipe_out %}
    {% else %}
        {% set safe_y = max_y - act_y %}
    {% endif %}
    {% if (max_z-act_z) > 0.3 %}
        {% set safe_z_wipe = 0.3 %}
        {% set safe_z = (((max_z-act_z)/3)-0.3) %}
    {% else %}
        {% set safe_z = ((max_z-act_z)/3) %}
    {% endif %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default('false')|lower %}
    {% set b2b_state = printer.save_variables.variables.b2b_state|default('false')|lower %}
    {% set ena_bed_mesh = printer['gcode_macro _COMMON_VARIABLE'].bed_mesh|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info('==== PRINT_END ====')}
        {action_respond_info("filament_type: '%s'" % (filament_type))}
        {action_respond_info("wipe_out: '%s'" % (wipe_out))}
        {action_respond_info("retract: [end: '%s', speed: '%s', pause: '%s']" % (retract_end,retract_speed,retract_pause))}
        {action_respond_info('===============')}
    {% endif %}

    M400  # wait for buffer to clear
    G91
    G92 E0 # reset extruder
    G1 E-{retract_pause} F{retract_speed}   # retract filament
    # TODO: Break this out into PARK_SAFE
    {% if safe_z_wipe > 0 %}
        G0 Z{safe_z_wipe} F{velocity*60}
        G0 X{safe_x} Y{safe_y} F{velocity*60}
        G0 Z{safe_z-safe_z_wipe} F{velocity*60}
    {% else %}
        G0 X{safe_x} Y{safe_y} F{velocity*60}
        G0 Z{safe_z} F{velocity*60}
    {% endif %}
    G92 E0 # reset extruder
    G1 E-{retract_end-retract_pause} F{retract_speed}

    {% if b2b_state == "false" %}
        RESPOND MSG='Ending print'
        TURN_OFF_HEATERS
        M107  # turn off fan
        G90 # absolute positioning
        G28 X Y
        {% if ena_bed_mesh == "true" %}
            BED_MESH_CLEAR
        {% endif %}
        RESPOND MSG='Print Complete'
        M117 Print complete!
        M84
        _CIRCULATION_END FILAMENT={filament_type} DEBUG={debug}
        M117
    {% else %}
        RESPOND MSG='Waiting for next print. Holding temperature.'
        M104 S150
        G28 X Y
    {% endif %}
    _ADD_PRINT_TIME DEBUG={debug}
    _SD_PRINT_STATS R='done' DEBUG={debug}
    _SD_PRINTER_STATS DEBUG={debug}

[gcode_macro CANCEL_PRINT]
description: Common cancel print macro.
rename_existing: BASE_CANCEL_PRINT
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default('false')|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info('==== CANCEL_PRINT ====')}
        {action_respond_info('===============')}
    {% endif %}

    RESPOND MSG='Canceling Print'
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END DEBUG={debug}
    BASE_CANCEL_PRINT
