###############################
#       Filament Macros       #
###############################
# TODO: Add some kind of initialization and instructions. Needs two save variables.
# printer needs to have nothing loaded.
# filament_index needs to be 99 for nothing loaded.
# filament_loaded is true/false. false when unloaded.
# This same macro should be written to also be utilized as a reset when loading fails.

[gcode_macro FILAMENT]
description: Current filament status
gcode:
    # command params
    {% set reset = params.RESET|default()|lower %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set filaments = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array|default("NONE") %}
    {% set filament_index = printer.save_variables.variables.filament_index|default(0)|int %}
    {% set filament_loaded = printer.save_variables.variables.filament_loaded|default("false")|lower %}
    {% if filament_index != 0|int %}
        {% set filament_type = filaments[filament_index][0] %}
        {% set unload_temperature = filaments[filament_index][1] %}
        {% set load_temperature = filaments[filament_index][2] %}
    {% endif %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== FILAMENT =====")}
        {action_respond_info("reset: '%s'" % (reset))}
        {action_respond_info("filaments: '%s'" % (filaments))}
        {action_respond_info("filament_index: '%s'" % (filament_index))}
        {action_respond_info("filament_loaded: '%s'" % (filament_loaded))}
        {action_respond_info("===============")}
    {% endif %}

    {% if reset == "" %}
        {% if filaments == "NONE" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info('PRINTER_VARIABLE filament_temperature_array is missing!')}
        {% elif filament_index != 0|int and filament_loaded == "true" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info("%s filaments: [%s]" % (text, filaments|string))}
            {action_respond_info("%s filament index: [%s] Filament loaded: [array: '%s']" % (text, filament_index|int, filament_loaded|lower))}
            {action_respond_info("%s loaded: [filament: '%s', load temperature: '%sc', unload temperature: '%sc'" % (text, filament_type|string, load_temperature|int, unload_temperature|int))}
        {% elif filament_index != 0|int and filament_loaded == "false" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info("ERROR: Load is in failed state. Fix with 'FILAMENT RESET=UNLOAD' to get reset state back")}
        {% elif filament_index == 0|int and filament_loaded == "false" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info('no filament loaded')}
        {% endif %}
    {% elif reset == "unload" %}
        SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
        SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'
        {action_respond_info('==== FILAMENT STATUS ====')}
        {action_respond_info('Values fixed set to unload state, try loading again')}
    {% endif %}

# TODO: Fix load speeds. slow fast.
# TODO: Make it LOAD_FILAMENT F=PLA|PET|ABS|ASA whatever. Then find the the index number with for/loop somehow. INSERT MAGIC
# TODO: Fix display menu when doing the above
[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    # command params
    # {% set i = params.I|int %}
    {% set filament = params.FILAMENT|default("")|upper %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set load_distance = printer['gcode_macro _PRINTER_VARIABLE'].load_distance|default(40)|int %}
    {% set load_extrude = printer['gcode_macro _PRINTER_VARIABLE'].load_extrude|default(50)|int %}
    {% set retract_pause = printer['gcode_macro _PRINTER_VARIABLE'].pause_retract_distance|default(3)|int %}
    {% set retract_end = printer['gcode_macro _PRINTER_VARIABLE'].end_retract_distance|default(10)|int %}
    {% set filaments = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set saved_filament_index = printer.save_variables.variables.filament_index|default(-1)|int %}
    {% set return_temperature = printer.extruder.target %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% set ns = namespace() %}
    {% set ns.i = -1 %}
    {% set ns.filament_type = "" %}
    {% set ns.load_temperature = 0|int %}

    # Look for the FILAMENT in our list OR use I to find it directly
    {% if 'I' in params %}
        {% set ns.i = params.I %}
        {% set ns.filament_type = filaments[i][0]|upper %}
        {% set ns.load_temperature = filaments[i][2]|int %}
    {% elif filament != "" %}
        {% set elem_count = filaments|length %}
        {% for index in range(elem_count) %}
            {% if filaments[index][0] == filament %}
                {% set ns.i = index %}
                {% set ns.filament_type = filaments[index][0]|upper %}
                {% set ns.load_temperature = filaments[index][2]|int %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== LOAD_FILAMENT =====")}
        {action_respond_info("filament: '%s'" % (filament))}
        {action_respond_info("found_filament: [i: '%s', filament_type: '%s', load_temperature: '%s'" %
            (ns.i,ns.filament_type,ns.load_temperature))}
        {action_respond_info("load: [distance: '%smm', extrude: '%smm']" % (load_distance, load_extrude))}
        {action_respond_info("retract: [pause: '%smm', end: '%smm']" % (retract_pause, retract_end))}
        {action_respond_info("return_temperature: '%s'" % (return_temperature))}
        {action_respond_info("saved_filament_index: '%s'" % (saved_filament_index))}
        {action_respond_info("filaments: '%s'" % (filaments))}

        {action_respond_info("printer: [idle_timeout.state: '%s', extruder.can_extrude: '%s', pause_resume.is_paused: '%s' ]" %
            (printer.idle_timeout.state,printer.extruder.can_extrude,printer.pause_resume.is_paused))}
        {action_respond_info("===============")}
    {% endif %}

    #TODO: check if ns.i is > 0 before proceeding or do so without smart temp stuff
    {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
        {% if ns.filament_type != "" and ns.load_temperature > 0 %}
            {% set can_extrude = printer.extruder.can_extrude|lower %}

            SAVE_GCODE_STATE NAME=LOAD_FILAMENT
            PARK_FRONT_MID
            G90

            M109 S{ns.load_temperature}
            M83 # set extruder to relative
            G1 E{load_distance} F1500 # quickly load 90mm filament
            G1 E{load_extrude} F300 # slower extrusion for hotend path
            {% if printer.print_stats.state == "paused" %}
                G1 E{retract_pause} F800
            {% else %}
                G1 E-{retract_end} F800 # retract
            {% endif %}

            SAVE_VARIABLE VARIABLE=filament_index VALUE='"{ns.i}"'
            SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'

            {% if printer.idle_timeout.state == "Printing" %}
                M109 S{return_temperature} # restore old extruder temperature
            {% else %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
            {% endif %}
            {action_respond_info('ERROR: Heater was not heating. Something went wrong SOMEWHERE.')}

            RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
        {% else %}
            {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
        {% endif %}
    {% else %}
        {action_respond_info('ERROR: Filament loading is disabled while printing.')}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    # command params
    {% set filament = params.FILAMENT|default("")|upper %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set unretract_start = printer['gcode_macro _PRINTER_VARIABLE'].unretract_start|float %}
    {% set filaments = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set filament_index = printer.save_variables.variables.filament_index|default(-1)|int %}
    {% set return_temperature = printer.extruder.target %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% set ns = namespace() %}
    {% set ns.i = -1 %}
    {% set ns.filament_type = "" %}
    {% set ns.unload_temperature = 0|int %}

     # Look for the FILAMENT in our list OR use I to find it directly
    {% if 'I' in params %}
        {% set ns.i = params.I %}
        {% set ns.filament_type = filaments[i][0]|upper %}
        {% set ns.unload_temperature = filaments[i][1]|int %}
    {% elif filament != "" %}
        {% set elem_count = filaments|length %}
        {% for index in range(elem_count) %}
            {% if filaments[index][0] == filament %}
                {% set ns.i = index %}
                {% set ns.filament_type = filaments[index][0]|upper %}
                {% set ns.unload_temperature = filaments[index][1]|int %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== UNLOAD_FILAMENT =====")}
        {action_respond_info("filament: '%s'" % (filament))}
        {action_respond_info("found_filament: [i: '%s', filament_type: '%s', unload_temperature: '%s'" %
            (ns.i,ns.filament_type,ns.unload_temperature))}
        {action_respond_info("unretract_start: '%smm'" % (unretract_start))}
        {action_respond_info("filaments: '%s'" % (filaments))}
        {action_respond_info("return_temperature: '%s'" % (return_temperature))}
        {action_respond_info("saved_filament_index: '%s'" % (saved_filament_index))}

        {action_respond_info("printer: [idle_timeout.state: '%s', extruder.can_extrude: '%s', pause_resume.is_paused: '%s' ]" %
            (printer.idle_timeout.state,printer.extruder.can_extrude,printer.pause_resume.is_paused))}
        {action_respond_info("===============")}
    {% endif %}

    {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
        {% if filament_index != "0" %}
            SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
            PARK_FRONT_MID
            M109 S{ns.unload_temperature}
            G90
            M83
            G1 E{unretract_start} F250 # Unretract filament
            G92 E0

            _FORM_TIP_STANDALONE

            SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
            SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'

            {% if printer.idle_timeout.state == "Printing" %}
                M109 S{extruder_target} # restore old extruder temperature
            {% else %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
            {% endif %}
        {% else %}
            {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
        {% endif %}
        RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% else %}
        {action_respond_info('ERROR: Filament unloading is disabled while printing.')}
    {% endif %}

# Modifed ERCF_FORM_TIP_STANDALONE from https://github.com/EtteGit/EnragedRabbitProject/blob/main/Klipper_Files/ercf_software.cfg
[gcode_macro _FORM_TIP_STANDALONE]
description: Generic tip forming macro
gcode:
#TODO: Massive cleanup and simplification. Do we need all variables in printer variables? Probably not. Which do we not need?
# TODO: Also fix debug, shit's probably missing
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set cooling_tube_length = printer['gcode_macro _PRINTER_VARIABLE'].cooling_tube_length|int %}
    {% set cooling_tube_retraction = printer['gcode_macro _PRINTER_VARIABLE'].cooling_tube_retraction|int %}
    {% set initial_cooling_speed = printer['gcode_macro _PRINTER_VARIABLE'].initial_cooling_speed|int %}
    {% set final_cooling_speed = printer['gcode_macro _PRINTER_VARIABLE'].final_cooling_speed|int %}
    {% set cooling_moves = printer['gcode_macro _PRINTER_VARIABLE'].cooling_moves|int %}
    {% set use_skinnydip = printer['gcode_macro _PRINTER_VARIABLE'].use_skinnydip|int %}
    {% set skinnydip_distance = printer['gcode_macro _PRINTER_VARIABLE'].skinnydip_distance|int %}
    {% set dip_insertion_speed = printer['gcode_macro _PRINTER_VARIABLE'].dip_insertion_speed|int %}
    {% set dip_extraction_speed = printer['gcode_macro _PRINTER_VARIABLE'].dip_extraction_speed|int %}
    {% set cooling_zone_pause = printer['gcode_macro _PRINTER_VARIABLE'].cooling_zone_pause|int %}
    {% set unloading_speed_start = printer['gcode_macro _PRINTER_VARIABLE'].unloading_speed_start|int %}
    {% set unloading_speed = printer['gcode_macro _PRINTER_VARIABLE'].unloading_speed|int %}
    {% set ramming_volume = printer['gcode_macro _PRINTER_VARIABLE'].ramming_volume|int %}
    {% set unload_distance = printer['gcode_macro _PRINTER_VARIABLE'].unload_distance|int %}
    {% set ratio = (ramming_volume|float) /23.0 %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _FORM_TIP_STANDALONE ====")}
        {action_respond_info("initial: [cooling_speed: '%s']" % (initial_cooling_speed))}
        {action_respond_info("cooling: [tube_length: '%s', tube_retraction: '%s', moves: '%s', zone_pause: '%s']" % (cooling_tube_length,cooling_tube_retraction,cooling_moves,cooling_zone_pause))}
        {action_respond_info("final: [cooling_speed: '%s', eject: '%s']" % (final_cooling_speed,final_eject))}
        {action_respond_info("use: [skinnydip: '%s']" % (use_skinnydip))}
        {action_respond_info("dip: [insertion_speed: '%s', extraction_speed: '%s']" % (dip_insertion_speed,dip_extraction_speed))}
        {action_respond_info("unloading: [speed_start: '%s', speed: '%s', unload_distance: '%s']" % (unloading_speed_start,unloading_speed,unload_distance))}
        {action_respond_info("ramming_volume: '%s'" % (ramming_volume))}
        {action_respond_info("skinnydip_distance: '%s'" % (skinnydip_distance))}
        {action_respond_info("===============")}
    {% endif %}

    G91
    G92 E0
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% set RATIO = (ramming_volume|float) /23.0 %}
    G1 E{0.5784 * ratio|float} F299 #7
    G1 E{0.5834 * ratio|float} F302 #3
    G1 E{0.5918 * ratio|float} F306 #6
    G1 E{0.6169 * ratio|float} F319 #6
    G1 E{0.3393 * ratio|float} F350 #0
    G1 E{0.3363 * ratio|float} F350 #0
    G1 E{0.7577 * ratio|float} F392 #6
    G1 E{0.8382 * ratio|float} F434 #3
    G1 E{0.7776 * ratio|float} F469 #9
    G1 E{0.1293 * ratio|float} F469 #9
    G1 E{0.9673 * ratio|float} F501 #2
    G1 E{1.0176 * ratio|float} F527 #2
    G1 E{0.5956 * ratio|float} F544 #6
    G1 E{0.4555 * ratio|float} F544 #6
    G1 E{1.0662 * ratio|float} F552 #4
    # Retraction
    {% set total_retraction_distance = cooling_tube_retraction|float + cooling_tube_length|float / 2 - 15 %}
    G1 E-15 F{1.0 * unloading_speed_start|float * 60}
    G1 E-{0.7 * total_retraction_distance} F{1.0 * unloading_speed|float * 60}
    G1 E-{0.2 * total_retraction_distance} F{0.5 * unloading_speed|float * 60}
    G1 E-{0.1 * total_retraction_distance} F{0.3 * unloading_speed|float * 60}
    # Generate Cooling Moves
    {% set SPEED_INC = (final_cooling_speed|float - initial_cooling_speed|float) / (2 * cooling_moves|float - 1) %}
    {% for move in range(cooling_moves|int) %}
      G1 E{cooling_tube_length} F{(initial_cooling_speed|float + SPEED_INC*move*2) * 60}
      G1 E-{cooling_tube_length} F{(initial_cooling_speed|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}
    # Generate a skinnydip move
    {% if use_skinnydip|int == 1 %}
      G1 E{skinnydip_distance} F{dip_insertion_speed|float * 60}
      G1 E-{skinnydip_distance} F{dip_extraction_speed|float * 60}
      G4 P{cooling_zone_pause}
    {% endif %}
    # Final eject
        G92 E0
        G1 E-{unload_distance} F2500
        G92 E0

[delayed_gcode HEATER_OFF]
gcode:
# TODO: Do this correctly. This is a lazy way
  M109 S0
