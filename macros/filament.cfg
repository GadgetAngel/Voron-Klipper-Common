###############################
#       Filament Macros       #
###############################
# TODO: Add some kind of initialization and instructions. Needs two save variables.
# printer needs to have nothing loaded.
# filament_index needs to be 99 for nothing loaded.
# filament_loaded is true/false. false when unloaded.
# This same macro should be written to also be utilized as a reset when loading fails.

[gcode_macro FILAMENT]
description: Current filament status
gcode:
    # command params
    {% set filament = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array|default(NONE) %}
    {% set filament_index = printer.save_variables.variables.filament_index|int %}
    {% set filament_loaded = printer.save_variables.variables.filament_loaded|lower %}
    # variables
    {% if filament_index != 99|int %}
        {% set load_temperature = filament[filament_index][2] %}
        {% set unload_temperature = filament[filament_index][1] %}
        {% set filament_type = filament[filament_index][0] %}
    {% endif %}
    # features
    {% if filament == NONE %}
        {action_respond_info('PRINTER_VARIABLE filament_temperature_array is missing!')}
    {% endif %}
    {% if printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array and filament_index != 99|int %}
        {action_respond_info('==== FILAMENT STATUS ====')}
        {action_respond_info("%s filaments: [%s]" % (text, filament|string))}
        {action_respond_info("%s filament index: [%s] Filament loaded: [array: '%s']" % (text, filament_index|int, filament_loaded|lower))}
        {% if filament_loaded == "true" %}
            {action_respond_info("%s loaded: [filament: '%s', load temperature: '%sc', unload temperature: '%sc'" % (text, filament_type|string, load_temperature|int, unload_temperature|int))}
        {% endif %}
    {% endif %}
    {% if printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array and filament_index == 99|int and filament_loaded == "true" %}
# TODO: Update text when there is a macro/logic to fix it.
        {action_respond_info('ERROR: Load is in failed state. Fix with ''')}
    {% endif %}
    {% if printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array and filament_index == 99|int and filament_loaded == "false" %}
        {action_respond_info("filament loaded: '%s'" % (filament_loaded))}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
# TODO: Fix load speeds. slow fast.
# TODO: Make it LOAD_FILAMENT F=PLA|PET|ABS|ASA whatever. Then find the the index number with for/loop somehow. INSERT MAGIC
# TODO: Fix display menu when doing the above
    # command params
    {% set filament_index = params.I|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set load_distance = printer['gcode_macro _PRINTER_VARIABLE'].load_distance|default(40)|int %}
    {% set load_extrude = printer['gcode_macro _PRINTER_VARIABLE'].load_extrude|default(50)|int %}
    {% set retract_pause = printer['gcode_macro _PRINTER_VARIABLE'].pause_retract_distance|default(3)|int %}
    {% set retract_end = printer['gcode_macro _PRINTER_VARIABLE'].end_retract_distance|default(10)|int %}
    {% set filaments = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set saved_filament_index = printer.save_variables.variables.filament_index|int %}
    {% set return_temperature = printer.extruder.target %}
    {% set load_temperature = filament[filament_index][2] %}
    {% set filament_type = filament[filament_index][0] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== LOAD_FILAMENT =====")}
        {action_respond_info("%s settings: '%s'" % (text, filaments|string))}
        {action_respond_info("index: [filament_index: '%s', saved_filament_index: '%s']" % (filament_index|int, saved_filament_index|int))}
        {action_respond_info("filament: [filament_type: '%s', load_temperature: '%sc']" % (filament_type|string, load_temperature|int))}
        {action_respond_info("loading: [load_distance: '%smm', load_extrude: '%smm']" % (load_distance, load_extrude))}
        {action_respond_info("retraction: [retract_pause: '%smm', retract_end: '%smm']" % (retract_pause, retract_end))}
        {action_respond_info("extruder temp before/after: '%sc'" % (return_temperature))}
        {action_respond_info("===============")}
    {% endif %}

    {% if saved_filamentindex == 99 %}
        SAVE_GCODE_STATE NAME=LOAD_FILAMENT
        PARK_FRONT_MID
        G90
# TODO: This is the shit that needs better logic. This is not ideal.
        {% if filament_type == "PLA" %}
            M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'
        {% elif filament_type == "ABS" %}
            M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"1"'
        {% elif filament_type == "PET" %}
            M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"2"'
        {% elif filament_type == "FLEX" %}
	        M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"3"'
        {% elif filament_type == "ASA" %}
	        M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"4"'
        {% elif filament_type == "NYLON" %}
	        M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"5"'
        {% elif filament_type == "PC" %}
	        M109 S{load_temperature}
	        SAVE_VARIABLE VARIABLE=filament_index VALUE='"6"'
        {% endif %}
        M83 ; set extruder to relative
        {% if printer.extruder.can_extrude|lower == "true" %}
            G1 E{load_distance} F1500 ; quickly load 90mm filament
            G1 E{load_extrude} F300 ; slower extrusion for hotend path
            {% if printer.print_stats.state == "paused" %}
                G1 E{retract_pause} F800
            {% else %}
                G1 E-{retract_end} F800 ; retract
            {% endif %}
            SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
            {% if printer.idle_timeout.state == "Printing" %}
                M109 S{return_temperature} ; restore old extruder temperature
            {% else %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
            {% endif %}
        {% elif printer.extruder.can_extrude|lower == "false" %}
        {action_respond_info('ERROR: Heater was not heating. Something went wrong SOMEWHERE.')}
        RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
        {% endif %}
    {% else %}
        {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set unretract_start = printer['gcode_macro _PRINTER_VARIABLE'].unretract_start|float %}
    {% set filament = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperatures %}
    {% set filament_index = printer.save_variables.variables.filament_index|int %}
    {% set return_temperature = printer.extruder.target %}
    {% set filament_type = filament[filament_index][0] %}
    {% set unload_temperature = filament[filament_index][1] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== UNLOAD_FILAMENT =====")}
    {action_respond_info("%s settings: '%s'" % (text, filament|string))}
    {action_respond_info("%s filament_index: '%s'" % (text, filamentindex|int))}
    {action_respond_info("%s filament: [filament_type: '%s', unload_temperature: '%sc']" % (text, filament_type|string, unload_temperature|int))}
    {action_respond_info("unretract_start: '%smm'" % (unretract_start))}
    {action_respond_info("return_temperature: [%sc]" % (return_temperature))}
        {action_respond_info("===============")}
    {% endif %}

    {% if filamentindex != 99 %}
        SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
        PARK_FRONT_MID
        {% if filament_type %}
            M109 S{unload_temperature}
        {% endif %}
        SAVE_VARIABLE VARIABLE=filament_index VALUE='"99"'
        G90 # Absolute Positioning
        M83 # Make the E relative independant of other axis
        {% if printer.extruder.can_extrude|lower == "true" %}
            G1 E{unretract_start} F250 # Unretract filament
            G92 E0
            ERCF_FORM_TIP_STANDALONE
            SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
            {% if printer.idle_timeout.state == "Printing" %}
                M109 S{extruder_target} ; restore old extruder temperature
            {% else %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
            {% endif %}
        {% elif printer.extruder.can_extrude|lower == "false" %}
            {action_respond_info('ERROR: Heater was not heating. Something went wrong SOMEWHERE.')}
        {% endif %}
        RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% else %}
        {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
    {% endif %}

# Modifed ERCF_FORM_TIP_STANDALONE from https://github.com/EtteGit/EnragedRabbitProject/blob/main/Klipper_Files/ercf_software.cfg
[gcode_macro _FORM_TIP_STANDALONE]
description: Generic tip forming macro
gcode:
#TODO: Massive cleanup and simplification. Do we need all variables in printer variables? Probably not. Which do we not need?
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set COOLING_TUBE_LENGTH = printer['gcode_macro _PRINTER_VARIABLE'].cooling_tube_length|int %}
    {% set COOLING_TUBE_RETRACTION = printer['gcode_macro _PRINTER_VARIABLE'].cooling_tube_retraction|int %}
    {% set INITIAL_COOLING_SPEED = printer['gcode_macro _PRINTER_VARIABLE'].initial_cooling_speed|int %}
    {% set FINAL_COOLING_SPEED = printer['gcode_macro _PRINTER_VARIABLE'].final_cooling_speed|int %}
    {% set COOLING_MOVES = printer['gcode_macro _PRINTER_VARIABLE'].cooling_moves|int %}
    {% set USE_SKINNYDIP = printer['gcode_macro _PRINTER_VARIABLE'].use_skinnydip|int %}
    {% set SKINNYDIP_DISTANCE = printer['gcode_macro _PRINTER_VARIABLE'].skinnydip_distance|int %}
    {% set DIP_INSERTION_SPEED = printer['gcode_macro _PRINTER_VARIABLE'].dip_insertion_speed|int %}
    {% set DIP_EXTRACTION_SPEED = printer['gcode_macro _PRINTER_VARIABLE'].dip_extraction_speed|int %}
    {% set COOLING_ZONE_PAUSE = printer['gcode_macro _PRINTER_VARIABLE'].cooling_zone_pause|int %}
    {% set UNLOADING_SPEED_START = printer['gcode_macro _PRINTER_VARIABLE'].unloading_speed_start|int %}
    {% set UNLOADING_SPEED = printer['gcode_macro _PRINTER_VARIABLE'].unloading_speed|int %}
    {% set RAMMING_VOLUME = printer['gcode_macro _PRINTER_VARIABLE'].ramming_volume|int %}
	{% set UNLOAD_DISTANCE = printer['gcode_macro _PRINTER_VARIABLE'].unload_distance|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _FORM_TIP_STANDALONE ====")}
        {action_respond_info("initial: [cooling_speed: '%s', retract: '%s']" % (initial_cooling_speed,initial_retract))}
        {action_respond_info("cooling: [tube_length: '%s', tube_retraction: '%s', moves: '%s', zone_pause: '%s']" %
            (cooling_tube_length,cooling_tube_retraction,cooling_moves,cooling_moves,cooling_zone_pause))}
        {action_respond_info("final: [cooling_speed: '%s', eject: '%s']" % (final_cooling_speed,final_eject))}
        {action_respond_info("use: [skinnydip: '%s', fast_skinnydip: '%s']" % (use_skinnydip,use_fast_skinnydip))}
        {action_respond_info("dip: [insertion_speed: '%s', extraction_speed: '%s']" % (dip_insertion_speed,dip_extraction_speed))}
        {action_respond_info("unloading: [speed_start: '%s', speed: '%s']" % (unloading_speed_start,unloading_speed))}
        {action_respond_info("ramming_volume: '%s'" % (ramming_volume))}
        {action_respond_info("skinnydip_distance: '%s'" % (skinnydip_distance))}
        {action_respond_info("melt_zone_pause: '%s'" % (melt_zone_pause))}
        {action_respond_info("===============")}
    {% endif %}

    G91
    G92 E0
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% set RATIO = (ramming_volume|float) /23.0 %}
    G1 E{0.5784 * ratio|float} F299 #7
    G1 E{0.5834 * ratio|float} F302 #3
    G1 E{0.5918 * ratio|float} F306 #6
    G1 E{0.6169 * ratio|float} F319 #6
    G1 E{0.3393 * ratio|float} F350 #0
    G1 E{0.3363 * ratio|float} F350 #0
    G1 E{0.7577 * ratio|float} F392 #6
    G1 E{0.8382 * ratio|float} F434 #3
    G1 E{0.7776 * ratio|float} F469 #9
    G1 E{0.1293 * ratio|float} F469 #9
    G1 E{0.9673 * ratio|float} F501 #2
    G1 E{1.0176 * ratio|float} F527 #2
    G1 E{0.5956 * ratio|float} F544 #6
    G1 E{0.4555 * ratio|float} F544 #6
    G1 E{1.0662 * ratio|float} F552 #4
    # Retraction
    {% set total_retraction_distance = cooling_tube_retraction|float + cooling_tube_length|float / 2 - 15 %}
    G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
    G1 E-{0.7 * total_retraction_distance} F{1.0 * UNLOADING_SPEED|float * 60}
    G1 E-{0.2 * total_retraction_distance} F{0.5 * UNLOADING_SPEED|float * 60}
    G1 E-{0.1 * total_retraction_distance} F{0.3 * UNLOADING_SPEED|float * 60}
    # Generate Cooling Moves
    {% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
    {% for move in range(COOLING_MOVES|int) %}
      G1 E{cooling_tube_length} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
      G1 E-{cooling_tube_length} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}
    # Generate a skinnydip move
    {% if USE_SKINNYDIP|int == 1 %}
      G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
      G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
      G4 P{COOLING_ZONE_PAUSE}
    {% endif %}
	# Final eject
        G92 E0
        G1 E-{UNLOAD_DISTANCE} F2500
		G92 E0

[delayed_gcode HEATER_OFF]
gcode:
# TODO: Do this correctly. This is a lazy way
  M109 S0